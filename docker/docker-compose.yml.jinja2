version: "3"

networks:
  my_net:

volumes:
  idealoom_static:
  pgdata:
  redisdata:

services:
  redis:
    image: redis:3.2-alpine
    volumes:
      - redisdata:/data
    networks:
      - my_net

  memcached:
    image: memcached:1.5-alpine
    networks:
      - my_net

  database:
    image: postgres:12.1-alpine
    volumes:
      - pgdata:/var/lib/postgresql/data
    networks:
      - my_net

  web:
    image: nginx:1.13-alpine
    ports:
      - "8080:80"
    volumes:
      - .:/opt/default_config
      - idealoom_static:/opt/idealoom_static
    environment:
      http_upgrade: '$http_upgrade'
    depends_on:
{%- for hostname in docker_idealoom_hosts %}
      - idealoom{{ loop.index }}{% endfor %}
{%- if docker_sentry == 'docker' %}
      - sentry
{%- endif %}
    command: /bin/sh -c "cp /opt/default_config/nginx_*.conf /etc/nginx/conf.d && nginx -g 'daemon off;'"
    networks:
      my_net:
        aliases:
{%- for hostname in docker_idealoom_hosts %}
          - {{ hostname }}
{%- endfor %}

{% if docker_sentry == 'docker' %}
  sentry:
    image: sentry:latest
    depends_on:
     - redis
     - database
    links:
     - redis
     - database:postgres
    networks:
      - my_net
    ports:
     - 9000:9000
    stdin_open: true
    tty: true
    environment:
      SENTRY_POSTGRES_HOST: postgres
      SENTRY_DB_USER: sentry
      SENTRY_DB_NAME: sentry
      SENTRY_DB_PASSWORD: {{ sentry_db_password }}
      SENTRY_REDIS_HOST: redis
      SENTRY_SINGLE_ORGANIZATION: "true"
      SENTRY_SECRET_KEY: {{ sentry_secret_key }}
{#    SENTRY_EMAIL_HOST:
      SENTRY_EMAIL_PORT:
      SENTRY_EMAIL_USER:
      SENTRY_EMAIL_PASSWORD:
      SENTRY_EMAIL_USE_TLS:
      SENTRY_ENABLE_EMAIL_REPLIES:
      SENTRY_SMTP_HOSTNAME:
 #}

  sentry_celery_beat:
    image: sentry:latest
    depends_on:
     - redis
     - database
    links:
     - redis
     - database:postgres
    networks:
      - my_net
    command: "sentry run cron"
    environment:
      SENTRY_POSTGRES_HOST: postgres
      SENTRY_DB_USER: sentry
      SENTRY_DB_NAME: sentry
      SENTRY_DB_PASSWORD: {{ sentry_db_password }}
      SENTRY_REDIS_HOST: redis
      SENTRY_SINGLE_ORGANIZATION: "true"
      SENTRY_SECRET_KEY: {{ sentry_secret_key }}

  sentry_celery_worker:
    image: sentry:latest
    depends_on:
     - redis
     - database
    links:
     - redis
     - database:postgres
    networks:
      - my_net
    command: "sentry run worker"
    environment:
      SENTRY_POSTGRES_HOST: postgres
      SENTRY_DB_USER: sentry
      SENTRY_DB_NAME: sentry
      SENTRY_DB_PASSWORD: {{ sentry_db_password }}
      SENTRY_REDIS_HOST: redis
      SENTRY_SINGLE_ORGANIZATION: "true"
      SENTRY_SECRET_KEY: {{ sentry_secret_key }}
{% endif %}

{% if docker_imap == 'docker' or docker_smtp == 'docker' %}
  # TODO: Add mail
  # mail:
  #   image: mailu:stable

{% endif %}

{% if docker_piwik == 'docker' %}
  # TODO: Configure piwik
  # piwik:
  #   image: piwik:latest
{% endif %}

{% for hostname in docker_idealoom_hosts %}
  idealoom{{ loop.index }}:
    image: idealoom:latest
    volumes:
      - .:/var/docker_data
      - idealoom_static:/opt/idealoom_static
    environment:
      DOCKER_RC: /var/docker_data/idealoom{{ loop.index }}.rc
      BUILDING_DOCKER: "false"
    depends_on:
      - redis
      - memcached
{%- if docker_sentry == 'docker' %}
      - sentry
{%- endif %}
    command: sh -c 'cd /opt/idealoom; /etc/init.d/ssh start ; chown idealoom_user /opt/idealoom_static; . venv/bin/activate ; sleep 5; env BUILDING_DOCKER=false fab -c /var/docker_data/idealoom{{ loop.index }}.rc docker_startup ; tail -f /dev/null'
    networks:
      - my_net
{% endfor %}
